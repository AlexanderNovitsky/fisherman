// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: params
func (_m *Logger) Debug(params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: message, params
func (_m *Logger) Debugf(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: params
func (_m *Logger) Error(params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: message, params
func (_m *Logger) Errorf(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: params
func (_m *Logger) Info(params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: message, params
func (_m *Logger) Infof(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// Write provides a mock function with given fields: p
func (_m *Logger) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
