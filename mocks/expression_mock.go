package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i fisherman/internal/expression.Expression -o ./mocks\expression_mock.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ExpressionMock implements expression.Expression
type ExpressionMock struct {
	t minimock.Tester

	funcEval          func(expression string) (b1 bool, err error)
	inspectFuncEval   func(expression string)
	afterEvalCounter  uint64
	beforeEvalCounter uint64
	EvalMock          mExpressionMockEval
}

// NewExpressionMock returns a mock for expression.Expression
func NewExpressionMock(t minimock.Tester) *ExpressionMock {
	m := &ExpressionMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.EvalMock = mExpressionMockEval{mock: m}
	m.EvalMock.callArgs = []*ExpressionMockEvalParams{}

	return m
}

type mExpressionMockEval struct {
	mock               *ExpressionMock
	defaultExpectation *ExpressionMockEvalExpectation
	expectations       []*ExpressionMockEvalExpectation

	callArgs []*ExpressionMockEvalParams
	mutex    sync.RWMutex
}

// ExpressionMockEvalExpectation specifies expectation struct of the Expression.Eval
type ExpressionMockEvalExpectation struct {
	mock    *ExpressionMock
	params  *ExpressionMockEvalParams
	results *ExpressionMockEvalResults
	Counter uint64
}

// ExpressionMockEvalParams contains parameters of the Expression.Eval
type ExpressionMockEvalParams struct {
	expression string
}

// ExpressionMockEvalResults contains results of the Expression.Eval
type ExpressionMockEvalResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for Expression.Eval
func (mmEval *mExpressionMockEval) Expect(expression string) *mExpressionMockEval {
	if mmEval.mock.funcEval != nil {
		mmEval.mock.t.Fatalf("ExpressionMock.Eval mock is already set by Set")
	}

	if mmEval.defaultExpectation == nil {
		mmEval.defaultExpectation = &ExpressionMockEvalExpectation{}
	}

	mmEval.defaultExpectation.params = &ExpressionMockEvalParams{expression}
	for _, e := range mmEval.expectations {
		if minimock.Equal(e.params, mmEval.defaultExpectation.params) {
			mmEval.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmEval.defaultExpectation.params)
		}
	}

	return mmEval
}

// Inspect accepts an inspector function that has same arguments as the Expression.Eval
func (mmEval *mExpressionMockEval) Inspect(f func(expression string)) *mExpressionMockEval {
	if mmEval.mock.inspectFuncEval != nil {
		mmEval.mock.t.Fatalf("Inspect function is already set for ExpressionMock.Eval")
	}

	mmEval.mock.inspectFuncEval = f

	return mmEval
}

// Return sets up results that will be returned by Expression.Eval
func (mmEval *mExpressionMockEval) Return(b1 bool, err error) *ExpressionMock {
	if mmEval.mock.funcEval != nil {
		mmEval.mock.t.Fatalf("ExpressionMock.Eval mock is already set by Set")
	}

	if mmEval.defaultExpectation == nil {
		mmEval.defaultExpectation = &ExpressionMockEvalExpectation{mock: mmEval.mock}
	}
	mmEval.defaultExpectation.results = &ExpressionMockEvalResults{b1, err}
	return mmEval.mock
}

//Set uses given function f to mock the Expression.Eval method
func (mmEval *mExpressionMockEval) Set(f func(expression string) (b1 bool, err error)) *ExpressionMock {
	if mmEval.defaultExpectation != nil {
		mmEval.mock.t.Fatalf("Default expectation is already set for the Expression.Eval method")
	}

	if len(mmEval.expectations) > 0 {
		mmEval.mock.t.Fatalf("Some expectations are already set for the Expression.Eval method")
	}

	mmEval.mock.funcEval = f
	return mmEval.mock
}

// When sets expectation for the Expression.Eval which will trigger the result defined by the following
// Then helper
func (mmEval *mExpressionMockEval) When(expression string) *ExpressionMockEvalExpectation {
	if mmEval.mock.funcEval != nil {
		mmEval.mock.t.Fatalf("ExpressionMock.Eval mock is already set by Set")
	}

	expectation := &ExpressionMockEvalExpectation{
		mock:   mmEval.mock,
		params: &ExpressionMockEvalParams{expression},
	}
	mmEval.expectations = append(mmEval.expectations, expectation)
	return expectation
}

// Then sets up Expression.Eval return parameters for the expectation previously defined by the When method
func (e *ExpressionMockEvalExpectation) Then(b1 bool, err error) *ExpressionMock {
	e.results = &ExpressionMockEvalResults{b1, err}
	return e.mock
}

// Eval implements expression.Expression
func (mmEval *ExpressionMock) Eval(expression string) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmEval.beforeEvalCounter, 1)
	defer mm_atomic.AddUint64(&mmEval.afterEvalCounter, 1)

	if mmEval.inspectFuncEval != nil {
		mmEval.inspectFuncEval(expression)
	}

	mm_params := &ExpressionMockEvalParams{expression}

	// Record call args
	mmEval.EvalMock.mutex.Lock()
	mmEval.EvalMock.callArgs = append(mmEval.EvalMock.callArgs, mm_params)
	mmEval.EvalMock.mutex.Unlock()

	for _, e := range mmEval.EvalMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmEval.EvalMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmEval.EvalMock.defaultExpectation.Counter, 1)
		mm_want := mmEval.EvalMock.defaultExpectation.params
		mm_got := ExpressionMockEvalParams{expression}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmEval.t.Errorf("ExpressionMock.Eval got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmEval.EvalMock.defaultExpectation.results
		if mm_results == nil {
			mmEval.t.Fatal("No results are set for the ExpressionMock.Eval")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmEval.funcEval != nil {
		return mmEval.funcEval(expression)
	}
	mmEval.t.Fatalf("Unexpected call to ExpressionMock.Eval. %v", expression)
	return
}

// EvalAfterCounter returns a count of finished ExpressionMock.Eval invocations
func (mmEval *ExpressionMock) EvalAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEval.afterEvalCounter)
}

// EvalBeforeCounter returns a count of ExpressionMock.Eval invocations
func (mmEval *ExpressionMock) EvalBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEval.beforeEvalCounter)
}

// Calls returns a list of arguments used in each call to ExpressionMock.Eval.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmEval *mExpressionMockEval) Calls() []*ExpressionMockEvalParams {
	mmEval.mutex.RLock()

	argCopy := make([]*ExpressionMockEvalParams, len(mmEval.callArgs))
	copy(argCopy, mmEval.callArgs)

	mmEval.mutex.RUnlock()

	return argCopy
}

// MinimockEvalDone returns true if the count of the Eval invocations corresponds
// the number of defined expectations
func (m *ExpressionMock) MinimockEvalDone() bool {
	for _, e := range m.EvalMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.EvalMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterEvalCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEval != nil && mm_atomic.LoadUint64(&m.afterEvalCounter) < 1 {
		return false
	}
	return true
}

// MinimockEvalInspect logs each unmet expectation
func (m *ExpressionMock) MinimockEvalInspect() {
	for _, e := range m.EvalMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ExpressionMock.Eval with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.EvalMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterEvalCounter) < 1 {
		if m.EvalMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ExpressionMock.Eval")
		} else {
			m.t.Errorf("Expected call to ExpressionMock.Eval with params: %#v", *m.EvalMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEval != nil && mm_atomic.LoadUint64(&m.afterEvalCounter) < 1 {
		m.t.Error("Expected call to ExpressionMock.Eval")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ExpressionMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockEvalInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ExpressionMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ExpressionMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockEvalDone()
}
