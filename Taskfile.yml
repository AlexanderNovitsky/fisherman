# https://taskfile.dev

version: '3'

vars:
  GIT_COMMIT:
    sh: git log -n 1 --format=%h

tasks:
  build:
    desc: Build the go binary in developer mode.
    cmds:
      - go build -v -ldflags="-X fisherman/constants.Version=dev-{{ .GIT_COMMIT | upper }}"

  build:ci:
    desc: '[For CI] Build the go binary in production mode (NOT REALISE)'
    cmds:
      - go build -v -ldflags="-s -w -X fisherman/constants.Version=dev-{{ .GIT_COMMIT | upper }}"

  test:
    desc: Run all tests
    cmds:
      - go test -cover ./...

  test:ci:
    desc: '[For CI] Run all tests with coverage and race detection'
    cmds:
      - go test -race -cover -coverprofile='coverage.xml' -covermode=atomic -v ./...

  lint:
    desc: Lint all code
    cmds:
      - golangci-lint run ./...

  check:
    desc: Runs build, lint and test tasks
    cmds:
      - task: build
      - task: lint
      - task: test

  generate:
    desc: Generates mocks
    cmds:
      - minimock -i fisherman/commands.CliCommand -o ./testing/mocks/cli_command_mock.go
      - minimock -i fisherman/internal/expression.Engine -o ./testing/mocks/engine_mock.go
      - minimock -i fisherman/internal.ExecutionContext -o ./testing/mocks/execution_context_mock.go
      - minimock -i fisherman/internal/handling.Factory -o ./testing/mocks/factory_mock.go
      - minimock -i fisherman/infrastructure.FileSystem -o ./testing/mocks/file_system_mock.go
      - minimock -i fisherman/internal/handling.Handler -o ./testing/mocks/handler_mock.go
      - minimock -i fisherman/infrastructure.Repository -o ./testing/mocks/repository_mock.go
      - minimock -i fisherman/configuration.Rule -o ./testing/mocks/rule_mock.go
      - minimock -i fisherman/infrastructure.Shell -o ./testing/mocks/shell_mock.go
